name: Main branch workflow

on:
  pull_request: # only pull request
    branches: [ "main" ]
  workflow_dispatch:

    
permissions:
  id-token: write # This is required for requesting the JWT

jobs:
  build_branch:
    runs-on: ubuntu-latest
    env:
      REPOSITORY_NAME: "digiboard"
      IMAGE_TAG: "latest"

    steps:
      - name: checkout on the workdir
        uses: actions/checkout@v3

      - name: Set up JDK 17 
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Get node_modules cache
        uses: actions/cache@v3.0.2
        id: node_modules_cache 
        with:
          path: "**/node_modules **/next/cache"
          key: ${{ runner.os }}-node_modules_cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules_cache-

      - name: build artifact
        run: mvn -B package
#   deploy:
#     runs-on: ubuntu-latest
#     needs: build_branch
#     steps:
      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.27.0'
        id: install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::755840619199:role/github-to-aws-oicd
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR service
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'

      # - name: Build, tag, and push docker image to Amazon ECR
      #   env:
      #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     REPOSITORY: digiboard
      #     IMAGE_TAG: latest
      #   run: |
      #     docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
      #     docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Cache Docker layers
        uses: actions/cache@v3.0.2
        id: docker_images_cache  
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-buildx-

      - name: Build, tag & push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Scan Docker image
        uses: snyk/actions/docker@master
        continue-on-error: true
        with:
          image: ${{ steps.login-ecr.outputs.registry }}/${{env.REPOSITORY_NAME }}:${{ env.IMAGE_TAG }}
          args: --file=Dockerfile --severity-threshold=high --sarif-file-output=snyk.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # - name: Update kube config to set name & region & role
      #   run: aws eks update-kubeconfig --name tf-cluster --region us-east-2


      # - name: Deploy app using helm
      #   run: |
      #     helm upgrade --install --wait --timeout 5m0s digiboard-chart ./helm-charts/digiboard-chart


      # - name: Deploy postgress db
      #   run: |
      #     helm upgrade --install --wait --timeout 5m0s  db-postgres-chart ./helm-charts/db-postgres-chart

      # - name: Deploy artifact on aws eks using helm chart
      #   run: |
      #     helm upgrade --install --wait --timeout 150s  digiboard-chart ./helm-charts/digiboard-chart --kubeconfig ~/.kube/config